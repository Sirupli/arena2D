const char * SCRIPT_ARRAY[2] = {
	"#!/usr/bin/python\nimport _thread\nimport signal\nimport re\nimport sys\nimport os\nimport shutil\nimport time\nfrom tensorboard.main import run_main\nfrom torch.utils.tensorboard import SummaryWriter\n\nrun_folder = \"./monitor_runs/\"\nwriter_folder = \"arena2d_monitor\"\ncsv_file = \"data.csv\"\nfile_polling_delay = 10 # wait n seconds between file polling\ncsv_delimiter = ','\n\ndef stats_writer():\n\twriter = SummaryWriter(log_dir=run_folder+writer_folder)\n\tbytes_read = 0\n\tnum_lines = 0\n\tcol_names = []\n\tlast_unfinished_line = \"\" \n\t# polling file for changes\n\twhile True:\n\t\twith open(csv_file, 'r') as f:\n\t\t\tf.seek(bytes_read)\n\t\t\tr = f.read()\n\t\t\tif len(r) > 0:\n\t\t\t\tbytes_read += len(r) # a line end is always added by function read() (for some reason)\n\t\t\t\tcomplete_lines = (last_unfinished_line + r).splitlines()\n\t\t\t\tif r[-1] != \"\\n\":\n\t\t\t\t\tlast_unfinished_line = complete_lines[-1]\n\t\t\t\t\tcomplete_lines = complete_lines[:-1]\n\t\t\t\tif len(complete_lines) > 0:\n\t\t\t\t\t# get header\n\t\t\t\t\tif num_lines == 0:\n\t\t\t\t\t\tcol_names = complete_lines[0].split(csv_delimiter)\n\t\t\t\t\t\tcomplete_lines = complete_lines[1:]\n\n\t\t\t\t\tfor l in complete_lines:\n\t\t\t\t\t\tvalues = l.split(csv_delimiter)\n\t\t\t\t\t\tepisode = int(float(values[0]))\n\t\t\t\t\t\tfor index in range(1, len(col_names)):\n\t\t\t\t\t\t\twriter.add_scalar(col_names[index], float(values[index]), episode)\n\n\t\t\t\t\tnum_lines += len(complete_lines)\n\n\t\ttime.sleep(file_polling_delay)\t\n\ndef signal_handler(sig, frame):\n\t# remove run folder\n\tshutil.rmtree(run_folder)\n\tsys.exit(0)\n\nif __name__ == '__main__':\n\t# remove old run folder\n\tshutil.rmtree(run_folder, ignore_errors=True)\n\n\t# create directory\n\ttry:\n\t\tos.mkdir(run_folder)\n\texcept OSError as error:\n\t\tpass\n\t\n\t# create a writer thread\n\t_thread.start_new_thread(stats_writer, ())\n\n\t# set sigint handler\n\tsignal.signal(signal.SIGINT, signal_handler)\n\t\n\t# open tensorboard main\n\tsys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\n\tsys.argv.append(\"--logdir\")\n\tsys.argv.append(run_folder)\n\tsys.exit(run_main())\n\n",
	"#!/bin/bash\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\nfolder_name = \"plots/\"\ndata_path = \"data.csv\"\n\n\nif __name__ == \"__main__\":\n\t# create folder\n\ttry:\n\t\tos.mkdir(folder_name)\n\texcept OSError as error:\n\t\tpass\n\n\t# create plots\n\tdata_names = np.genfromtxt(data_path, dtype='str', delimiter=',', max_rows=1)\n\tdata = np.loadtxt(data_path, delimiter=\",\", skiprows=1)\n\tepisodes = data[:,0]\n\tfor i in range(1, len(data[0])):\n\t\ttitle = data_names[i]\n\t\tplt_path = folder_name + title.lower().replace(\" \", \"_\") + \".pdf\"\n\t\tprint(\"Creating plot '%s': %s ...\"%(title, plt_path))\n\t\tplt.title(title)\n\t\tplt.xlabel(\"Episodes\")\n\t\tplt.plot(episodes, data[:,i], linewidth=0.8)\n\t\tplt.savefig(plt_path)\n\t\tplt.clf()\n\n\tprint(\"Done!\")\n",
};

const char * SCRIPT_NAME_ARRAY[2] = {
	"monitor.py",
	"plot.py",
};