static const char * VERTEX_SHADER_SOURCE = 
"#version 120\n"
"\n"
"attribute float vertexID;\n"
"attribute float triangleID;\n"
"\n"
"varying vec4 out_color;\n"
"\n"
"// NOTE: MAX-NUMBER-PARTICLES is defined at runtime (replaced by particle-shader - class)\n"
"uniform vec4 triangles[2*MAX_NUMBER_PARTICLES];\n"
"\n"
"const vec2 TRIANGLE_VERTICES[3] = vec2[3](	vec2( 0.0, 		1.0),\n"
"						vec2( 0.8660254038,	-0.5),\n"
"						vec2(-0.8660254038,	-0.5));\n"
"\n"
"uniform mat4 projMat;\n"
"uniform mat4 cameraMat;\n"
"void main()\n"
"{\n"
"	float cos_rad = cos(triangles[int(triangleID)*2].w);\n"
"	float sin_rad = sin(triangles[int(triangleID)*2].w);\n"
"	float scale = triangles[int(triangleID)*2].z;\n"
"	vec4 transform = triangles[int(triangleID)*2];\n"
"	mat4 t = mat4(	vec4(scale*cos_rad, -sin_rad*scale, 0, 0),\n"
"					vec4(sin_rad*scale, scale*cos_rad, 0, 0),\n"
"					vec4(0, 0, 1, 0),\n"
"					vec4(transform.x, transform.y, 0, 1));\n"
"	gl_Position = projMat * cameraMat * t * vec4(TRIANGLE_VERTICES[int(vertexID)], 0, 1);\n"
"	out_color = triangles[int(triangleID)*2 + 1];\n"
"}\n"
;

static const char * FRAGMENT_SHADER_SOURCE = 
"#version 120\n"
"\n"
"varying  vec4 out_color;\n"
"\n"
"void main()\n"
"{\n"
"	gl_FragColor = out_color;\n"
"}\n"
;