static const char * VERTEX_SHADER_SOURCE = 
" #version 130 \n"
"\n"
"//a simple shader for rendering plain color (not textured) 2d objects\n"
"\n"
"//input data\n"
"in vec3 vertex;\n"
"in vec4 color;\n"
"in vec4 color2;\n"
"\n"
"//output data to fragment shader\n"
"//out vec3 out_vertex;\n"
"out vec4 out_color;\n"
"out vec4 out_color2;\n"
"\n"
"//matrices\n"
"uniform mat4 projection_mat = mat4(vec4(1,0,0,0), vec4(0,1,0,0), vec4(0,0,1,0), vec4(0,0,0,1));\n"
"uniform mat4 camera_mat = mat4(vec4(1,0,0,0), vec4(0,1,0,0), vec4(0,0,1,0), vec4(0,0,0,1));\n"
"uniform mat4 modelview_mat = mat4(vec4(1,0,0,0), vec4(0,1,0,0), vec4(0,0,1,0), vec4(0,0,0,1));\n"
"\n"
"void main(void)\n"
"{\n"
"	gl_Position = projection_mat * camera_mat * modelview_mat * vec4(vertex, 1);\n"
"	out_color = color;\n"
"	out_color2 = color2;\n"
"}\n"
"\n"
;

static const char * FRAGMENT_SHADER_SOURCE = 
"#version 130\n"
"\n"
"//input from vertex shader\n"
"in vec4 out_color;\n"
"in vec4 out_color2;\n"
"\n"
"//color output\n"
"out vec4 fragment_color;\n"
"uniform int pattern_type = 0;   //0: no pattern, 1: horizontal stripes, 2: vertical stripes, 3: diagonal stripes(lower right to upper left),\n"
"                                //4: diagonal stripes(lower left to upper right), 5: tiling\n"
"uniform int pattern_size = 4;\n"
"void main(void)\n"
"{\n"
"	fragment_color = out_color;\n"
"	if(pattern_type > 0)\n"
"	{\n"
"        switch(pattern_type)\n"
"        {\n"
"        case 1:\n"
"        {\n"
"            if(int(gl_FragCoord.y)%(pattern_size*2) >= pattern_size)\n"
"                fragment_color = out_color2;\n"
"        }break;\n"
"        case 2:\n"
"        {\n"
"            if(int(gl_FragCoord.x)%(pattern_size*2) >= pattern_size)\n"
"                fragment_color = out_color2;\n"
"        }break;\n"
"        case 3:\n"
"        {\n"
"            if(int(gl_FragCoord.y+gl_FragCoord.x)%(pattern_size*2) >= pattern_size)\n"
"                fragment_color = out_color2;\n"
"        }break;\n"
"        case 4:\n"
"        {\n"
"            if(int(gl_FragCoord.y+8092-gl_FragCoord.x)%(pattern_size*2) >= pattern_size)\n"
"                fragment_color = out_color2;\n"
"        }break;\n"
"        default:\n"
"        {\n"
"            if(int(gl_FragCoord.x)%(2*pattern_size)/pattern_size != int(gl_FragCoord.y)%(2*pattern_size)/pattern_size)\n"
"                fragment_color = out_color2;\n"
"        }break;\n"
"        }\n"
"	}\n"
"}\n"
;